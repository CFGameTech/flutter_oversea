group = "com.example.luk_sdk"
version = "1.0"

def localP = new Properties()
def localPF = rootProject.file('local.properties')
if(localPF.exists()){
    localPF.withReader('UTF-8'){reader ->
        localP.load(reader);
    }
}
//def flutterRoot = localP.getProperty('flutter.sdk')

def flutterRoot = "/Users/yq_mac/development/flutter"

buildscript {
    repositories {

        maven { url 'https://maven.aliyun.com/repository/google' }
//        maven { url 'https://maven.aliyun.com/repository/jcenter' }
        maven { allowInsecureProtocol = true
            url 'https://maven.aliyun.com/nexus/content/groups/public' }

        google()
        mavenCentral()

    }

    dependencies {
        classpath("com.android.tools.build:gradle:8.1.0")
    }
}

rootProject.allprojects {
    repositories {

        maven { url 'https://maven.aliyun.com/repository/google' }
//        maven { url 'https://maven.aliyun.com/repository/jcenter' }
        maven { allowInsecureProtocol = true
            url 'https://maven.aliyun.com/nexus/content/groups/public' }

        google()
        mavenCentral()

        flatDir{
            dirs project(':luk_sdk').file('libs')
//              dirs project(':').file('libs')
        }
    }
}

apply plugin: "com.android.library"

android {
    compileSdk 34
    if (project.android.hasProperty("namespace")) {
        namespace = "com.example.luk_sdk"
    }


    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdk = 21
    }


    dependencies {
        implementation(name:'cfg_lib_v1.6.2',ext:'aar')
        testImplementation("junit:junit:4.13.2")
        testImplementation("org.mockito:mockito-core:5.0.0")
        compileOnly files("$flutterRoot/bin/cache/artifacts/engine/android-arm/flutter.jar")
        compileOnly 'androidx.annotation:annotation:1.2.0'
    }

    testOptions {
        unitTests.all {
            testLogging {
               events "passed", "skipped", "failed", "standardOut", "standardError"
               outputs.upToDateWhen {false}
               showStandardStreams = true
            }
        }
    }
    buildToolsVersion '35.0.0'
}
